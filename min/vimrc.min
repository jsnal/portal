" Be sure vim-plug is installed.
if ! filereadable(expand('~/.vim/autoload/plug.vim'))
  echo "Installing vim-plug"
  silent !mkdir -p ~/.vim/autoload/
  silent !curl "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim" > ~/.vim/autoload/plug.vim
endif

call plug#begin('~/.vim/plugged')

" Git Notifications in Number Buffer
Plug 'https://github.com/airblade/vim-gitgutter'

" Fuzzy File Finder
Plug 'https://github.com/junegunn/fzf.vim'
Plug 'https://github.com/junegunn/fzf'

" Easy Commenting in and out
Plug 'https://github.com/tpope/vim-commentary'

" Automatically insert common characters
Plug 'https://github.com/jiangmiao/auto-pairs'

" Autocomplete Engine
if $VIM_COC == 'true'
  Plug 'https://github.com/neoclide/coc.nvim', { 'branch': 'release', 'on': [] }
  Plug 'https://github.com/neoclide/coc-tsserver', {'do': 'yarn install --frozen-lockfile'}
endif

" File Tree
Plug 'https://github.com/scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }

" Change working dir to project root
Plug 'https://github.com/airblade/vim-rooter'

" Color Scheme
Plug 'https://github.com/jsnal/vim-serape'

" Highlight same words in document
Plug 'https://github.com/pboettch/vim-highlight-cursor-words'

" Common syntax highlighting
Plug 'https://github.com/sheerun/vim-polyglot'

" Plugin Total: 15
call plug#end()

" Source all files in startup
filetype plugin on
if isdirectory($HOME . "/i3wm")
  for f in split(glob('~/i3wm/vim/startup/*.vim'), '\n')
    exe 'source' f
  endfor

  " Source highlight settings last
  exe 'source ~/i3wm/vim/startup/highlight.vim'
endif
let g:currentmode={ 'n' : 'Normal ', 'no' : 'N·Operator Pending ', 'v' : 'Visual ', 'V' : 'V-Line ', '^V' : 'V·Block ', 's' : 'Select ', 'S': 'S·Line ', '^S' : 'S·Block ', 'i' : 'Insert ', 'R' : 'Replace ', 'Rv' : 'V·Replace ', 'c' : 'Command ', 'cv' : 'Vim Ex ', 'ce' : 'Ex ', 'r' : 'Prompt ', 'rm' : 'More ', 'r?' : 'Confirm ', '!' : 'Shell ', 't' : 'Terminal '}

function! ModeCurrent() abort
  let l:modecurrent = mode()
  let l:modelist = toupper(get(g:currentmode, l:modecurrent, 'V-Block '))
  let l:current_status_mode = l:modelist
  hi! StatusLine ctermfg=white
  return l:current_status_mode
endfunction

" Badwolf Statusline
" set statusline=\ %{ModeCurrent()}>>
" set statusline+=\ %#PmenuSel#
" set statusline+=\ %r%m[%n]\ %f
" set statusline+=\ %#LineNr#
" set statusline+=%=%#PmenuSel#
" set statusline+=%=%{StatuslineGit()}
" set statusline+=%=\ %P\ %p%%
" set statusline+=%=\ (%l/%L)
" set statusline+=\ <<

" Jellybean Statusline
set statusline=\ %t
set statusline+=\ %r%m
set statusline+=%=\ %y
set statusline+=%=\ (%l/%L)
set statusline+=\ %p%%
noremap <TAB><TAB> :source %<CR>

" Movement
noremap H ^
noremap L g_
noremap j gj
noremap k gk
noremap <C-y> <C-y><C-y><C-y>
noremap <C-e> <C-e><C-e><C-e>

" Very magic search
nnoremap +/ /\v
vnoremap +/ /\v
noremap <C-R> :%s/

" Leader
let mapleader = ","
noremap <Leader>c :Commentary<CR>
nnoremap <Leader>l :nohlsearch<CR>
noremap <Leader>a :bprev<Return>
noremap <Leader>s :bnext<Return>
noremap <Leader>d :bd<Return>
noremap <Leader>f :b

" Function Keys
noremap <silent> <F2> :NERDTreeToggle<CR>
noremap <F4> :setlocal foldmethod=marker<CR>
noremap <F6> mzgg=G`z`<CR>

" FZF Bindings
noremap <C-f> :Files<CR>
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" Move Lines in Visual Mode
xnoremap <silent> K :call visual#move_up()<CR>
xnoremap <silent> J :call visual#move_down()<CR>

" Check TODO List with date
nnoremap <F5> lix<Esc>ll"=strftime("%c")<CR>P

" Better split navigation
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" Ag for word under cursor
nnoremap <silent> <leader>ag :Ag<CR>

" Move the cursor in wildmenu
cnoremap <Left> <Space><BS><Left>
cnoremap <Right> <Space><BS><Right>
" Folds
au BufWinLeave * silent mkview
augroup AutoSaveFolds
  autocmd!
  autocmd BufWinLeave * silent! mkview
  autocmd BufWinEnter * silent! loadview
augroup END

" Markdown, txt, LaTeX
au BufReadPost,BufNewFile *.md,*.tex call functions#spell()

" load buffer with possible vim/zsh files to edit
if isdirectory($HOME . "/i3wm")
  au BufReadPost,BufNewFile *.zshrc,zshrc call functions#openwithbuffer("~/i3wm/zsh/*.zsh")
  au BufReadPost,BufNewFile *.vimrc,vimrc call functions#openwithbuffer("~/i3wm/vim/startup/*.vim")
endif

" Enter and Leave Goyo
autocmd! User GoyoEnter call goyo#goyo_enter()
autocmd! User GoyoLeave call goyo#goyo_leave()

" delete whitespace on save
autocmd BufWritePre * %s/\s\+$//e

" remove new line auto comment
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
autocmd FileType netrw setl bufhidden=wipe

" close nerdtree if last window
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Override Default fzf statusline
autocmd! User FzfStatusLine call fzf#fzf_statusline()

" Remove highlighting on insert mode
autocmd InsertEnter * :let @/=""

" Enable coc.nvim when CursorHold is enabled, 500 Milliseconds
if $VIM_COC == 'true'
  augroup load_coc
    autocmd!
    autocmd CursorHold * call plug#load('coc.nvim') | autocmd! load_coc
  augroup END
endif
" Statusline
hi StatusLine       ctermfg=15  ctermbg=235  cterm=bold
hi StatusLineNC     ctermfg=243 ctermbg=235  cterm=bold

" Vertical Split
hi VertSplit        ctermfg=235  ctermbg=235

" Git Gutter
hi GitGutterAdd     ctermfg=2    ctermbg=none
hi GitGutterChange  ctermfg=3    ctermbg=none
hi GitGutterDelete  ctermfg=1    ctermbg=none
command! Wq :wq
command! W :w
command! Q :q
command! Wa :wa
command! Qa :qa
command! Wqa :wqa
cabbrev fzf FZF
cabbrev help vert help
command! WW :w !sudo dd of=%
" Setup Colorscheme
set background=dark
syntax on
if has('gui_running')
  silent! colorscheme default
else
  silent! colorscheme serape
  hi Normal  ctermbg=NONE
  hi LineNr  ctermbg=NONE
  hi nonText ctermbg=NONE
endif

" General
set nocompatible
set laststatus=2
set backspace=indent,eol,start
set path+=**
set wildmenu
set wildmode=longest,list,full
set shortmess=a
set cmdheight=2
set showmode
set splitbelow splitright
set ignorecase smartcase
set hidden
set updatetime=200

" Numbering and Indent
set number
set relativenumber
set wrap
set tabstop=2
set shiftwidth=2
set expandtab
set autoindent
set foldcolumn=0
set hlsearch
set incsearch
set linebreak

" File Settings
set fileformat=unix
set fileformats=unix
set fileencoding=utf-8
set fileencodings=utf-8
set encoding=utf-8
set ambiwidth=double
set showcmd
set backupdir=./.backup,.,/tmp
set directory=.,./.backup,/tmp
set autochdir
set nobackup
set nowritebackup

" Hilight Cursor Words
let g:HiCursorWords_linkStyle='Underlined'
let g:HiCursorWords_delay = 100

" Presistent Undo
if has ('persistent_undo')
  set undodir=$HOME/.vim_undo
  set undolevels=5000
  set undofile
endif

let g:fzf_nvim_statusline = 0
let g:fzf_layout = { 'right': '~20%' }
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_autoclose_preview_window_after_completion = 1
