" Be sure vim-plug is installed.
if ! filereadable(expand('~/.vim/autoload/plug.vim'))
  echo "Installing vim-plug"
  silent !mkdir -p ~/.vim/autoload/
  silent !curl "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim" > ~/.vim/autoload/plug.vim
endif

call plug#begin('~/.vim/plugged')

" Git Notifications in Number Buffer
Plug 'https://github.com/airblade/vim-gitgutter'

" Fuzzy File Finder
Plug 'https://github.com/junegunn/fzf.vim'
Plug 'https://github.com/junegunn/fzf'

" Easy Commenting in and out
Plug 'https://github.com/tpope/vim-commentary'

" Automatically insert common characters
Plug 'https://github.com/jiangmiao/auto-pairs'

" Autocomplete Engine
if $VIM_YCM == 'true'
  Plug 'Valloric/YouCompleteMe', { 'on': [] }
endif

" File Tree
Plug 'https://github.com/scrooloose/nerdtree'

" Change working dir to project root
Plug 'https://github.com/airblade/vim-rooter'

" Color Scheme
Plug 'https://github.com/nanotech/jellybeans.vim'

" Highlight same words in document
Plug 'https://github.com/pboettch/vim-highlight-cursor-words'

" Common syntax highlighting
Plug 'https://github.com/sheerun/vim-polyglot'

" Distraction Free Writing
Plug 'https://github.com/junegunn/goyo.vim'

" Plugin Total: 13
call plug#end()

" Enable YouCompleteMe only when told and on insert mode.
if $VIM_YCM == 'true'
  augroup load_us_ycm
    autocmd!
    autocmd InsertEnter * call plug#load('YouCompleteMe')
          \| autocmd! load_us_ycm
  augroup END
endif

" Source all files in startup
filetype plugin on
for f in split(glob('~/i3wm/vim/startup/*.vim'), '\n')
    exe 'source' f
endfor
" Folds
au BufWinLeave * silent mkview
augroup AutoSaveFolds
  autocmd!
  autocmd BufWinLeave * silent! mkview
  autocmd BufWinEnter * silent! loadview
augroup END

" Markdown, txt, LaTeX
au BufReadPost,BufNewFile *.md,*.tex call functions#spell() |  Goyo 125

" load buffer with possible vim/zsh files to edit
au BufReadPost,BufNewFile *.zshrc,zshrc call functions#openwithbuffer("~/i3wm/zsh/*.zsh")
au BufReadPost,BufNewFile *.vimrc,vimrc call functions#openwithbuffer("~/i3wm/vim/startup/*.vim")

" Enter and Leave Goyo
autocmd! User GoyoEnter call goyo#goyo_enter()
autocmd! User GoyoLeave call goyo#goyo_leave()

" delete whitespace on save
autocmd BufWritePre * %s/\s\+$//e

" remove new line auto comment
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
autocmd FileType netrw setl bufhidden=wipe

" close nerdtree if last window
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Override Default fzf statusline
autocmd! User FzfStatusLine call fzf#fzf_statusline()
command! Wq :wq
command! W :w
command! Q :q
command! Wa :wa
command! Qa :qa
command! Wqa :wqa
cabbrev fzf FZF
cabbrev help vert help
command! WW :w !sudo dd of=%
command! -bang -nargs=? -complete=dir HFiles
      \ call fzf#vim#files(<q-args>, {
      \ 'options': '--prompt=">>> " --color fg:-1,bg:-1,hl:230,fg+:-1,bg+:233,hl+:229 --color info:150,prompt:167,spinner:150,pointer:167,marker:0',
      \ 'source': 'find . -path "*/\.*" -prune -o -type f ! -name "*~" ! -name "*.class" -print -o -type l -print | sed s/^..//'}, <bang>0)
" Better Fold Method
function! functions#Betterfdm()
  if &foldmethod =~ "marker"
    set foldmethod=marker
  else
    set foldmethod=indent
  endif
endfunction
call functions#Betterfdm()

" Spell Check
function! functions#spell() abort
  if has('syntax')
    setlocal spell
    setlocal spellfile=~/.vim/spell/en.utf-7.add
    hi SpellBad cterm=underline
    setlocal spelllang=en
  endif
endfunction

" Opens file with predefined files
function! functions#openwithbuffer(path) abort
  for f in split(glob(a:path), '\n')
    exe 'badd' f
  endfor

  filetype detect
endfunction
noremap <TAB><TAB> :source %<CR>

" Movement
noremap H ^
noremap L g_
noremap j gj
noremap k gk
noremap <C-y> <C-y><C-y><C-y>
noremap <C-e> <C-e><C-e><C-e>

" Very magic search
nnoremap +/ /\v
vnoremap +/ /\v
map <C-R> :%s/

" Leader
let mapleader = ","
noremap <Leader>c :Commentary<CR>
map <Leader>a :bprev<Return>
map <Leader>s :bnext<Return>
map <Leader>d :bd<Return>
map <Leader>f :b

" Function Keys
nmap <silent> <F2> :NERDTreeToggle<CR>
map <F4> :setlocal foldmethod=marker<CR>
map <F6> mzgg=G`z`<CR>

" FZF Bindings
map <C-F> :HFiles<CR>
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" Move Lines in Visual Mode
xnoremap <silent> K :call visual#move_up()<CR>
xnoremap <silent> J :call visual#move_down()<CR>

" Check TODO List with date
nnoremap <F5> lix<Esc>ll"=strftime("%c")<CR>P

" Change SnipMate for YCM
imap <C-C> <esc>a<Plug>snipMateNextOrTrigger
smap <C-C> <Plug>snipMateNextOrTrigger

" Better split navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
" Setup Colorscheme
set background=dark
syntax on
if has('gui_running')
  silent! colorscheme default
else
  silent! colorscheme jellybeans
  hi Normal  ctermbg=NONE
  hi LineNr  ctermbg=NONE
  hi nonText ctermbg=NONE
endif

" General
set nocompatible
set laststatus=2
set backspace=indent,eol,start
set path+=**
set wildmenu
set shortmess=a
set cmdheight=2
set showmode
set splitbelow splitright
set ignorecase smartcase

" Numbering and Indent
set number
set relativenumber
set wrap
set tabstop=2
set shiftwidth=2
set expandtab
set autoindent
set foldcolumn=0
set hlsearch
set linebreak

" File Settings
set fileformat=unix
set fileformats=unix
set fileencoding=utf-8
set fileencodings=utf-8
set encoding=utf-8
set ambiwidth=double
set showcmd
set backupdir=./.backup,.,/tmp
set directory=.,./.backup,/tmp
set autochdir

" Hilight Cursor Words
let g:HiCursorWords_linkStyle='Underlined'
let g:HiCursorWords_delay = 100

" Presistent Undo
if has ('persistent_undo')
  set undodir=$HOME/.vim_undo
  set undolevels=5000
  set undofile
endif

let g:fzf_nvim_statusline = 0
let g:fzf_layout = { 'right': '~20%' }
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_autoclose_preview_window_after_completion = 1
let g:currentmode={ 'n' : 'Normal ', 'no' : 'N·Operator Pending ', 'v' : 'Visual ', 'V' : 'V-Line ', '^V' : 'V·Block ', 's' : 'Select ', 'S': 'S·Line ', '^S' : 'S·Block ', 'i' : 'Insert ', 'R' : 'Replace ', 'Rv' : 'V·Replace ', 'c' : 'Command ', 'cv' : 'Vim Ex ', 'ce' : 'Ex ', 'r' : 'Prompt ', 'rm' : 'More ', 'r?' : 'Confirm ', '!' : 'Shell ', 't' : 'Terminal '}

function! ModeCurrent() abort
  let l:modecurrent = mode()
  let l:modelist = toupper(get(g:currentmode, l:modecurrent, 'V-Block '))
  let l:current_status_mode = l:modelist
  hi! StatusLine ctermfg=white
  return l:current_status_mode
endfunction

" Badwolf Statusline
" set statusline=\ %{ModeCurrent()}>>
" set statusline+=\ %#PmenuSel#
" set statusline+=\ %r%m[%n]\ %f
" set statusline+=\ %#LineNr#
" set statusline+=%=%#PmenuSel#
" set statusline+=%=%{StatuslineGit()}
" set statusline+=%=\ %P\ %p%%
" set statusline+=%=\ (%l/%L)
" set statusline+=\ <<

hi StatusLine ctermfg=white ctermbg=NONE cterm=NONE
hi StatusLineNC ctermfg=240 ctermbg=NONE cterm=NONE

" Jellybean Statusline
set statusline=\ %{ModeCurrent()}>>
set statusline+=\ %r%m[%n]\ %f
set statusline+=%=\ %P\ %p%%
set statusline+=%=\ (%l/%L)
set statusline+=\ <<
