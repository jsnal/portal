include () { [[ -f "$1" ]] && source "$1" }

if [ ! -d $HOME/.zsh ]; then mkdir .zsh; fi

plug_loc=($HOME/.zsh)
if [ ! -d $plug_loc/shell-plugins ]; then git clone https://github.com/jsnal/shell-plugins $plug_loc/shell-plugins; fi
if [ ! -d $plug_loc/zsh-syntax-highlighting ]; then git clone https://github.com/zsh-users/zsh-syntax-highlighting $plug_loc/zsh-syntax-highlighting; fi
if [ ! -d $plug_loc/zsh-autopair ]; then git clone https://github.com/hlissner/zsh-autopair $plug_loc/zsh-autopair; fi

include $plug_loc/shell-plugins/zsh-git/git.plugin.zsh
include $plug_loc/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
include $plug_loc/zsh-autopair/autopair.zsh

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
# Short Pacman
alias pacup='sudo pacman -Sy && sudo abs && sudo aur'
alias pacls='pacman -Qi'
alias yaup='yay -Sy && sudo abs && sudo aur'
alias yals='yay -Qi'
alias yamir='yay -Syy'

alias tmuxn='tmux -2 new -s "$@"'
alias tmuxk='tmux kill-session -t "$@"'
alias tmuxa='tmux -2 a -t "$@"'

# Eaiser Backwards cd
alias ..1='cd ..'
alias ..2='cd ../..'
alias ..3='cd ../../..'
alias ..4='cd ../../../..'
alias ..5='cd ../../../../..'

alias v='vim'
alias z='zathura'
alias ls='ls -Fh --color=always --group-directories'
alias ll='ls -hl --color=always --group-directories'
alias l='ls'
alias aa='sudo $(fc -ln -1)'
alias gotop='gotop --color=monokai'
alias tll='~/i3wm/i3/Scripts/tll.sh l'
alias tlc='~/i3wm/i3/Scripts/tll.sh c "$@"'
alias tla='~/i3wm/i3/Scripts/tll.sh a "$@"'
alias drivec="~/i3wm/zsh/scripts/drive-compile.sh"
alias myip="ip -color address"

# Personal Plugins
export BM_CONFIG="$HOME/i3wm/zsh/plugins/shell-plugins/zshbookmarks/config.sh"
alias d="source $HOME/i3wm/zsh/plugins/shell-plugins/zshbookmarks/zshbookmark.sh -c $HOME/i3wm/zsh/.dirbookmarks dir"
alias f="source $HOME/i3wm/zsh/plugins/shell-plugins/zshbookmarks/zshbookmark.sh -c $HOME/i3wm/zsh/.filebookmarks file"
alias stagit-gen="$HOME/i3wm/zsh/plugins/shell-plugins/stagit-gen/gen.sh"
alias qp="git add --all && git commit  && git push $1 $(git branch 2>/dev/null | grep \* | sed -e 's/*[[:space:]]//g')"
autoload -U edit-command-line
zle -N edit-command-line

# Easy backwards cd
function up_widget() {
  BUFFER="cd .."
  zle accept-line
}
zle -N up_widget

# Bind to reattach to a backgrounded process if it exists.
function smart-fg() {
  if [[ $#BUFFER -eq 0 ]]; then
    fg
  else
    zle push-input
  fi
}
zle -N smart-fg

# Easy way to fzf in commonly used directories.
function fzf-edit() {
  local find_list=("$HOME/i3wm" "$HOME/Documents" "$HOME/Downloads" "$HOME/git")
  local choice=$(find ${find_list[@]} -type f | fzf)
  if [ ! -z $choice ]; then
    vim $choice
  fi
}
zle -N fzf-edit

bindkey -s '^e' 'f -f^M'
bindkey -s '^h' 'd -f^M'
bindkey -s '^f' 'fzf-edit^M'
bindkey -s '^y' '. ~/.zshrc^Mclear^M'
bindkey "^u" up_widget
bindkey '^w' forward-word
bindkey '^b' backward-word
bindkey '^d' kill-whole-line
bindkey '^k' backward-kill-word
bindkey '^j' kill-word
bindkey '^z' smart-fg
bindkey '^x^x' edit-command-line
function viz { vim $(fzf) }

function vif() {
    i3 fullscreen toggle & vim "$@"
    clear
}

function src() {
  local cache=$ZSH_CACHE_DIR
  autoload -U compinit zrecompile
  compinit -d "$cache/zcomp-$HOST"

  for f in ~/.zshrc "$cache/zcomp-$HOST"; do
  	zrecompile -p $f && command rm -f $f.zwc.old
  done

  source ~/.zshrc
}

function extract {
  echo Extracting $1 ...
  if [ -f $1 ] ; then
      case $1 in
          *.tar.bz2)   tar xjf $1  ;;
          *.tar.gz)    tar xzf $1  ;;
          *.bz2)       bunzip2 $1  ;;
          *.rar)       unrar x $1    ;;
          *.gz)        gunzip $1   ;;
          *.tar)       tar xf $1   ;;
          *.tbz2)      tar xjf $1  ;;
          *.tgz)       tar xzf $1  ;;
          *.zip)       unzip $1   ;;
          *.Z)         uncompress $1  ;;
          *.7z)        7z x $1  ;;
          *)        echo "'$1' cannot be extracted via extract()" ;;
      esac
  else
      echo "'$1' is not a valid file"
  fi
}

function os() {
  screenfetch | grep -o 'OS:.*'
}

function forcast() {
        curl wttr.in/"$@"
}

function net() {
  if [ -l = $1 ]
  then
    printf "Pinging Google.com... \n"
    ping -c 5 google.com | awk 'NR==2,NR==6{print $8}' | cut -c 6-
    printf "Pinging 8.8.8.8... \n"
    ping -c 5 8.8.8.8 | awk 'NR==2,NR==6{print $7}' | cut -c 6-
		printf '\n'
		ip addr
  elif [ -s = $1 ]
  then
    curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python -
		printf '\n'
		ip addr
  else
    printf "Error... "
  fi
}

function comp-type() {
	type=$(ls /sys/class/power_supply | grep BAT)

	if [ "$type" != "BAT0" ]; then
		echo "desktop"
	else
		echo "laptop"
	fi
}

function playdoom() {
  poss=$(ls /usr/share/games/doom/ | nl -w2)
  echo -e "$poss"\n
  echo Pick the wad you want to play.
  read wad
  play=$(ls /usr/share/games/doom/ | awk NR==$wad)
  echo $play
  i3-msg move scratchpad
  prboom-plus -iwad /usr/share/games/doom/$play
}

function mdc() {
  if [ -d = "$1" ]
  then
    rm "$2"
    pandoc --mathjax --toc -o "$2" "$3"/*.md
    evince "$2"
	elif [ -f = "$1" ]; then
		rm "$2"
		pandoc --mathjax --toc -o "$2" "$3"
		zathura "$2"
  else
    echo "Usage: mdc [OPTION] <Output Path> <Directory>"
  fi
}

function kernel-update() {
	latest=$(w3m -dump kernel.ubuntu.com/~kernel-ppa/mainline/ | tail -5 | awk 'FNR == 1 {print $2}')
	echo -n "Version "$latest" (y/n)? "
	read answer
	if echo "$answer" | grep -iq "^y" ;then
  	  echo Yes
	rm -r ~/.kernel-deb/*.deb
  headersall=$(w3m -dump http://kernel.ubuntu.com/\~kernel-ppa/mainline/"$latest" | awk '{print $3}' | awk '/headers/ && /generic/ && /amd64/')
	echo "\n--> Headers amd64 found "$headersall""
  headersamd64=$(w3m -dump http://kernel.ubuntu.com/\~kernel-ppa/mainline/"$latest" | awk '{print $3}' | awk '/headers/ && /all/')
	echo "\n--> Headers all found "$headersamd64""
  image=$(w3m -dump http://kernel.ubuntu.com/\~kernel-ppa/mainline/"$latest" | awk '{print $3}' | awk '/image/ && /generic/ && /amd64/')
	echo "\n--> Image found "$image""
	echo "\n"
	wget -P ~/.kernel-deb http://kernel.ubuntu.com/~kernel-ppa/mainline/"$latest""$headersall" http://kernel.ubuntu.com/~kernel-ppa/mainline/"$latest""$headersamd64" http://kernel.ubuntu.com/~kernel-ppa/mainline/"$latest""$image"
	echo "\n--> Installing kernel version "$latest""
	sudo dpkg -i ~/.kernel-deb/*.deb
	else
    	echo No
	fi
}

function encrypt() {
  if [[ -d = $1 ]]; then
    gpg -d $2 | tar xz
  else
    tar -cz $1 | gpg -c -o $1.tgz.gpg
  fi
}

function vl() {
  case $1 in
    up) amixer -q sset "Master" $2%+ && echo $(awk -F"[][]" '/dB/ { print $2 }' <(amixer sget Master));;
  down) amixer -q sset "Master" $2%- && echo $(awk -F"[][]" '/dB/ { print $2 }' <(amixer sget Master));;
   off) amixer set "Master" 0% && echo "Muted"
  esac
}

function ebackup() {
  if [ $1 = "-h" ]; then echo 'ebackup [DIR] [RECIPIENT]' && return 0; fi
  if [ ! -d $1 ]; then echo $1 'is not a directory.' && return 1; fi
  echo 'Encrypting' $1
  local date=$(date +%D | sed 's/\//-/g')
  tar -cz $1 | gpg --recipient $2 -e -o $1\-$date.tgz.gpg
}

function dbackup() {
  if [ $1 = "-h" ]; then echo 'dbackup [FILE]' && return 0; fi
  if [ ! -f $1 ]; then echo $1 'is not a file.' && return 1; fi
  echo 'Decrypting' $1 '.tgz.gpg'
  gpg -d $1 | tar xz
}

function paste-send() {
  local SEND_OUTPUT_HOST="jasonlong24.crabdance.com"
  local SEND_OUTPUT_PORT="2757"
  if [ ! -f $1 ]; then echo "$1 is not a valid file."; return 1; fi
  read "?Please enter a title: " entryTitle && read "?Please enter the date: " entryDate && read "?Please enter a filetype: " entryFT
  echo -e "//*title=$entryTitle\n//*date=$entryDate\n//*filetype=$entryFT" | cat - $1 | nc -v -q 0 $SEND_OUTPUT_HOST $SEND_OUTPUT_PORT
  echo "File Sent!"
}

# For checking local package on a failed command.
# https://wiki.archlinux.org/index.php/Zsh#The_%22command_not_found%22_hook
command_not_found_handler() {
  local pkgs cmd="$1"

  pkgs=(${(f)"$(pkgfile -i -b -- "$cmd" 2>/dev/null)"})
  if [[ -n "$pkgs" ]]; then
    printf '%s may be found in the following packages:\n' "$cmd"
    printf '  %s\n' $pkgs[@]
    return 0
  fi

  printf 'zsh: command not found: %s\n' "$cmd" 1>&2
  return 127
}

# Dump vim startup statistics.
function vim-dump() {
  vim --cmd 'profile start profile.log' \
    --cmd 'profile func *' \
    --cmd 'profile file *' \
    -c 'profdel func *' \
    -c 'profdel file *' \
    -c 'qa!'
}

function zsh-minify() {
  local OUT=$1
  if [ -z $1 ]; then local OUT="zshrc.min"; fi
  if [ -d $HOME/i3wm ]; then
    git -C $HOME/i3wm pull origin master
    cat $HOME/i3wm/zsh/zshrc.min > $OUT
    cat $HOME/i3wm/zsh/*.zsh >> $OUT
  fi
}

function vim-minify() {
  local OUT=$1
  if [ -z $1 ]; then local OUT="vimrc.min"; fi
  if [ -d $HOME/i3wm ]; then
    git -C $HOME/i3wm pull origin master
    cat $HOME/i3wm/vim/vimrc > $OUT
    find $HOME/i3wm/vim/startup -maxdepth 1 -iname '*.vim' -not -name 'functions.vim' -exec cat {} +>> $OUT
  fi
}
autoload -Uz compinit
autoload -U +X bashcompinit && bashcompinit
compinit

zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
zstyle ':completion:*' menu select
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true

zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'
bindkey -e
export FZF_DEFAULT_OPTS=$FZF_DEFAULT_OPTS' --prompt=">> " --color fg:-1,bg:-1,hl:230,fg+:167,bg+:233,hl+:229 --color info:150,prompt:110,spinner:150,pointer:167,marker:0'
export VISUAL="vim"
export EDITOR="vim"
export TERMINAL="st"
export HIST_STAMPS="mm.dd.yyyy"
export HISTSIZE=12000
export SAVEHIST=12000
export HISTFILE="$HOME/.zsh_history"
export TERM="xterm-256color"
export VIM_YCM=false
setopt prompt_subst
setopt promptsubst
setopt append_history
setopt extended_history
setopt sharehistory
setopt hist_reduce_blanks
setopt always_to_end
setopt complete_in_word
setopt auto_menu
setopt correct
setopt correctall
setopt noflowcontrol
# command time partly from: https://github.com/popstas/zsh-command-time

function preexec() {
  timer=${timer:-$SECONDS}
  ZSH_COMMAND_TIME_MSG=${ZSH_COMMAND_TIME_MSG-"%s"}
  export ZSH_COMMAND_TIME=""
}

function precmd {

  if [ $? -eq 0  ]; then
    END="$PROMPTC$%(1j.*.) "
  else
    END="$ALTPROMPT\$$PROMPTC%(1j.*.) "
  fi

  if [ $timer ]; then
    timer_show=$(($SECONDS - $timer))
    export ZSH_COMMAND_TIME="$timer_show"
    if [ ! -z ${ZSH_COMMAND_TIME_MSG} ]; then
      zsh_command_time
    fi
    unset timer
  fi

  function get_sudo() {
    if sudo -n true 2>/dev/null; then
      echo "sudo"
    else
      echo ""
    fi
  }

  BRACKET="%{%F{white}%}"
  SUDO="%{%F{red}%}"
  DIR="%{%F{cyan}%}"
  PROMPTC="%{%F{white}%}"
  CUSER="%{%F{yellow}%}"
  GIT_BRANCH="%{%F{magenta}%}"
  ALTPROMPT="%{%F{red}%}"

  DIR="[$DIR%B%(5~|../%3~|%~)%b$BRACKET$BRACKET]% "
  CUSER="$BRACKET@$CUSER%n"

  PROMPT="$SUDO$(get_sudo)$CUSER$BRACKET$DIR$END%{$reset_color%}%"
  RPROMPT="%F{8}${timer_show}%F{white}%}$(git_full_prompt)"
}

zsh_command_time() {
  if [ -n "$ZSH_COMMAND_TIME" ]; then
    hours=$(($ZSH_COMMAND_TIME/3600))
    min=$(($ZSH_COMMAND_TIME/60))
    sec=$(($ZSH_COMMAND_TIME%60))
    if [ "$ZSH_COMMAND_TIME" -le 60 ]; then
      timer_show="${ZSH_COMMAND_TIME}s "
    elif [ "$ZSH_COMMAND_TIME" -gt 60 ] && [ "$ZSH_COMMAND_TIME" -le 180 ]; then
      timer_show="${min}min ${sec}s "
    else
      if [ "$hours" -gt 0 ]; then
        min=$(($min%60))
        timer_show="${hours}h ${min}min ${sec}s "
      else
        timer_show="${min}min ${sec}s "
      fi
    fi
  fi
}

export SPROMPT="%B%F{red}'%R'%b%f -> %B%F{red}'%r'%b%f [%B%Uy%u%bes, %B%Un%u%bo, %B%Ue%u%bdit, %B%Ua%u%bbort]? "
